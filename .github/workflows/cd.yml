name: Continuous Deployment

on:
  workflow_run:
    workflows: ["Continuous Integration"]
    branches: [main]
    types:
      - completed

permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job - prepares the application
  build:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build for production
        run: npm run build
        env:
          NODE_ENV: production
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: dist/
          retention-days: 1

  # Staging deployment
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: staging
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: production-build
          path: ./dist
          
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'
          
      - name: Deploy to GitHub Pages (Staging)
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: Staging Health Check
        run: |
          echo "🏗️ Staging deployment complete!"
          echo "📍 Staging URL: ${{ steps.deployment.outputs.page_url }}"
          
          # Basic health check
          echo "Performing staging health check..."
          sleep 15
          
          if curl -f -s "${{ steps.deployment.outputs.page_url }}" > /dev/null; then
            echo "✅ Staging health check passed!"
          else
            echo "⚠️ Staging site may not be ready yet (this is normal for GitHub Pages)"
          fi

  # Production deployment (manual approval)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
    steps:
      - name: Production deployment
        run: |
          echo "🚀 Production deployment complete!"
          echo "📝 Production uses the same GitHub Pages site as staging"
          echo "💡 In a real-world scenario, you would deploy to a separate production domain"
          echo "🎯 For this tutorial project, staging serves as our production environment"
