name: Continuous Deployment

on:
  workflow_run:
    workflows: ["Continuous Integration"]
    branches: [main]
    types:
      - completed

permissions:
  contents: read
  pages: write
  id-token: write
  actions: write  # Needed to trigger release workflow

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job - Just builds the application
  build:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: dist/
          retention-days: 1

  # Staging deployment - Automatic
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: staging
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: production-build
          path: ./dist
          
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'
          
      - name: Deploy to GitHub Pages (Staging)
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: Staging Health Check
        run: |
          echo "🏗️ Staging deployment complete!"
          echo "📍 Staging URL: ${{ steps.deployment.outputs.page_url }}"
          
          # Basic health check
          echo "Performing staging health check..."
          sleep 15
          
          if curl -f -s "${{ steps.deployment.outputs.page_url }}" > /dev/null; then
            echo "✅ Staging health check passed!"
          else
            echo "⚠️ Staging site may not be ready yet (this is normal for GitHub Pages)"
          fi

  # Production approval and release trigger
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Production deployment notification
        run: |
          echo "🚀 Production deployment approved!"
          echo "📝 This environment represents our production-ready state"
          echo "🎯 Since we use GitHub Pages, staging IS our production deployment"
          echo "🔄 Now triggering Release workflow to create formal release..."
          
      - name: Determine release version
        id: version
        run: |
          # Get the latest tag to determine next version
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          
          # Extract version number without 'v' prefix
          VERSION=$(echo $LATEST_TAG | sed 's/^v//')
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          
          # Check commit messages since last tag for semantic versioning
          if [ "$LATEST_TAG" = "v0.0.0" ]; then
            # First release
            NEW_VERSION="v1.0.0"
          else
            # Increment based on conventional commits
            if git log ${LATEST_TAG}..HEAD --oneline | grep -q "BREAKING CHANGE\|feat!"; then
              # Major version bump
              NEW_VERSION="v$((MAJOR + 1)).0.0"
            elif git log ${LATEST_TAG}..HEAD --oneline | grep -q "feat\|feature"; then
              # Minor version bump
              NEW_VERSION="v${MAJOR}.$((MINOR + 1)).0"
            else
              # Patch version bump (for fixes, docs, etc.)
              NEW_VERSION="v${MAJOR}.${MINOR}.$((PATCH + 1))"
            fi
          fi
          
          echo "next_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "🎯 Next release version: $NEW_VERSION"
          
      - name: Trigger Release Workflow
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log('🚀 Triggering Release workflow...');
            
            const result = await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'release.yml',
              ref: 'main',
              inputs: {
                version: '${{ steps.version.outputs.next_version }}',
                prerelease: 'false',
                triggered_by_cd: 'true'
              }
            });
            
            console.log('✅ Release workflow triggered successfully!');
            console.log('📦 Release version: ${{ steps.version.outputs.next_version }}');
            
      - name: Production deployment complete
        run: |
          echo "🎉 Production deployment workflow complete!"
          echo "📍 Production URL: ${{ needs.deploy-staging.outputs.page_url || 'https://stargrrlmoonlight.github.io/SettingUpMcpServers' }}"
          echo "🎯 Release workflow has been triggered"
          echo "📦 Expected release version: ${{ steps.version.outputs.next_version }}"
          echo "⏳ Release creation in progress..."
          echo "This is a placeholder for rollback functionality"
          echo "In a real scenario, this would restore the previous stable version"
