name: Release Management

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags like v1.0.0
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for changelog generation
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm run test:ci
        
      - name: Build application
        run: npm run build
        
      - name: Generate changelog
        id: changelog
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LATEST_TAG" ]; then
            echo "No previous tags found, generating changelog from first commit"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            echo "Generating changelog since tag: $LATEST_TAG"
            CHANGELOG=$(git log ${LATEST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          # Save changelog to file
          echo "## Changes" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "$CHANGELOG" >> CHANGELOG.md
          
          # Set output for GitHub Actions
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Determine release version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF_NAME}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"
          
      - name: Create release archive
        run: |
          # Create a clean distribution package
          mkdir -p release-package
          cp -r dist/* release-package/
          cp package.json release-package/
          cp README.md release-package/
          cp LICENSE* release-package/ 2>/dev/null || echo "No LICENSE file found"
          
          # Create archive using standardized version
          tar -czf todo-app-${{ steps.version.outputs.version }}.tar.gz -C release-package .
          zip -r todo-app-${{ steps.version.outputs.version }}.zip release-package/
          
      - name: Create GitHub Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: Release ${{ steps.version.outputs.version }}
          body: |
            # Todo App Release ${{ steps.version.outputs.version }}
            
            ${{ steps.changelog.outputs.changelog }}
            
            ## Installation
            
            1. Download the release archive
            2. Extract the files
            3. Serve the `dist` folder with any web server
            
            ## What's Changed
            See the changelog above for detailed changes in this release.
            
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ github.event.before }}...${{ steps.version.outputs.version }}
          draft: false
          prerelease: ${{ github.event.inputs.prerelease || false }}
          
      - name: Upload Release Asset (tar.gz)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./todo-app-${{ steps.version.outputs.version }}.tar.gz
          asset_name: todo-app-${{ steps.version.outputs.version }}.tar.gz
          asset_content_type: application/gzip
          
      - name: Upload Release Asset (zip)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./todo-app-${{ steps.version.outputs.version }}.zip
          asset_name: todo-app-${{ steps.version.outputs.version }}.zip
          asset_content_type: application/zip
          
      - name: Update package.json version
        if: github.event_name == 'workflow_dispatch'
        run: |
          # Extract version number without 'v' prefix
          VERSION_NUMBER=$(echo "${{ steps.version.outputs.version }}" | sed 's/^v//')
          
          # Update package.json version
          npm version $VERSION_NUMBER --no-git-tag-version
          
          # Commit the version update
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add package.json
          git commit -m "chore: bump version to ${{ steps.version.outputs.version }}" || echo "No changes to commit"
          git push origin main || echo "No changes to push"
          
      - name: Notify release completion
        run: |
          echo "üéâ Release ${{ steps.version.outputs.version }} created successfully!"
          echo "üì¶ Release URL: ${{ steps.create_release.outputs.html_url }}"
          echo "‚¨áÔ∏è Download assets:"
          echo "   - todo-app-${{ steps.version.outputs.version }}.tar.gz"
          echo "   - todo-app-${{ steps.version.outputs.version }}.zip"
