name: Test, Build, Deploy & Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  pages: write
  id-token: write
  pull-requests: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
#
# IMPORTANT: This workflow requires a Personal Access Token (PAT) named 'RELEASE_PAT' 
# to be configured as a repository secret for:
# - Creating automated pull requests for version updates
# - Auto-merging release and coverage update PRs
# - Working with branch protection by using PR-based automation
#
# To create the PAT:
# 1. Go to GitHub Settings → Developer settings → Personal access tokens
# 2. Generate new token with 'repo' and 'workflow' scopes
# 3. Add as repository secret named 'RELEASE_PAT'
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  test-and-build:
    name: Test & Build
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    outputs:
      coverage: ${{ steps.coverage.outputs.coverage }}
      should-release: ${{ steps.release-check.outputs.should-release }}
      next-version: ${{ steps.release-check.outputs.next-version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        persist-credentials: true
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Run tests with coverage
      run: npm run test:ci
      
    - name: Extract coverage percentage
      if: matrix.node-version == '20.x'
      id: coverage
      run: |
        # Extract coverage percentage from the coverage summary
        COVERAGE=$(cat coverage/coverage-summary.json | jq -r '.total.lines.pct')
        echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
        echo "Coverage: $COVERAGE%"
      
    - name: Build application
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: matrix.node-version == '20.x'
      with:
        name: build-files-${{ github.sha }}
        path: dist/
        retention-days: 30

    - name: Check if release should be created
      if: matrix.node-version == '20.x' && github.ref == 'refs/heads/main' && github.event_name == 'push' && github.event.head_commit.author.email != 'actions@github.com'
      id: release-check
      run: |
        # Get the latest tag to determine next version
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Latest tag: $LATEST_TAG"
        
        # Check if there are any commits since the last tag
        if [ "$LATEST_TAG" = "v0.0.0" ]; then
          COMMITS_SINCE_TAG=1
        else
          COMMITS_SINCE_TAG=$(git rev-list ${LATEST_TAG}..HEAD --count)
        fi
        
        echo "Commits since last tag: $COMMITS_SINCE_TAG"
        
        if [ "$COMMITS_SINCE_TAG" -gt 0 ]; then
          echo "should-release=true" >> $GITHUB_OUTPUT
          
          # Extract version number without 'v' prefix
          VERSION=$(echo $LATEST_TAG | sed 's/^v//')
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          
          # Check commit messages since last tag for semantic versioning
          if [ "$LATEST_TAG" = "v0.0.0" ]; then
            # First release
            NEW_VERSION="v1.0.0"
            echo "🎉 First release detected"
          else
            # Get commit messages for analysis (with debug output)
            COMMIT_MESSAGES=$(git log ${LATEST_TAG}..HEAD --oneline)
            echo "🔍 Analyzing commits since $LATEST_TAG:"
            echo "$COMMIT_MESSAGES"
            
            # Version bumping with proper precedence - breaking changes always win
            if echo "$COMMIT_MESSAGES" | grep -qiE "(BREAKING CHANGE|breaking change)"; then
              # Major version bump for breaking changes (highest precedence)
              NEW_VERSION="v$((MAJOR + 1)).0.0"
              echo "📈 Major version bump detected (breaking change)"
            elif echo "$COMMIT_MESSAGES" | grep -qiE "(fix|patch)"; then
              # Patch version bump for fixes (only if no breaking changes)
              NEW_VERSION="v${MAJOR}.${MINOR}.$((PATCH + 1))"
              echo "🔧 Patch version bump detected (fix or patch)"
            else
              # Default to minor version for all other commits (lowest precedence)
              NEW_VERSION="v${MAJOR}.$((MINOR + 1)).0"
              echo "📦 Minor version bump (default for all other commits)"
            fi
          fi
          
          echo "next-version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "🎯 Next release version: $NEW_VERSION"
        else
          echo "should-release=false" >> $GITHUB_OUTPUT
          echo "No new commits since last tag, skipping release"
        fi

  accessibility:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    needs: test-and-build
    continue-on-error: true  # Make this job optional to prevent blocking the workflow
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
        
    - name: Setup Chrome for testing
      run: |
        # Install Chrome and ChromeDriver directly
        wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        
        # Get Chrome version and install matching ChromeDriver
        CHROME_VERSION=$(google-chrome --version | awk '{print $3}' | cut -d. -f1)
        echo "Detected Chrome version: $CHROME_VERSION"
        
        # Install ChromeDriver that matches Chrome version
        npm install -g chromedriver@$CHROME_VERSION
        
    - name: Run accessibility tests
      run: |
        # Set environment variables for axe testing
        export CHROME_BIN=$(which google-chrome)
        export CHROMEDRIVER_BIN=$(which chromedriver)
        echo "Using Chrome: $CHROME_BIN"
        echo "Using ChromeDriver: $CHROMEDRIVER_BIN"
        
        npm run build
        
        # Run axe with explicit ChromeDriver path
        npx start-server-and-test preview http://localhost:4173 "npx @axe-core/cli http://localhost:4173 --chromedriver-path $CHROMEDRIVER_BIN"

  deploy-pages:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: [test-and-build, accessibility]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && github.event.head_commit.author.email != 'actions@github.com'
    environment:
      name: production
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files-${{ github.sha }}
          path: ./dist
          
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: Production Health Check
        run: |
          echo "🚀 Production deployment complete!"
          echo "📍 Production URL: ${{ steps.deployment.outputs.page_url }}"
          
          # Basic health check
          echo "Performing production health check..."
          sleep 15
          
          if curl -f -s "${{ steps.deployment.outputs.page_url }}" > /dev/null; then
            echo "✅ Production health check passed!"
          else
            echo "⚠️ Production site may not be ready yet (this is normal for GitHub Pages)"
          fi

  update-version-files:
    name: Update Version Files
    runs-on: ubuntu-latest
    needs: [test-and-build, deploy-pages]
    if: needs.test-and-build.outputs.should-release == 'true' && github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    outputs:
      pr-created: ${{ steps.create-pr.outputs.pr-created || 'false' }}
      pr-number: ${{ steps.create-pr.outputs.pr-number || '' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_PAT }}
          persist-credentials: true
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Configure Git
        run: |
          # Configure git with GitHub Actions identity for all subsequent git operations
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
        
      - name: Create release branch
        id: create-branch
        run: |
          VERSION="${{ needs.test-and-build.outputs.next-version }}"
          BRANCH_NAME="automated-release/${VERSION}"
          
          echo "Creating release branch: $BRANCH_NAME"
          
          # Create and switch to new branch
          git checkout -b "$BRANCH_NAME"
          echo "branch-name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
      - name: Update package.json version
        run: |
          # Extract version number without 'v' prefix
          VERSION_NUMBER=$(echo "${{ needs.test-and-build.outputs.next-version }}" | sed 's/^v//')
          
          echo "Updating package.json to version $VERSION_NUMBER"
          
          # Update package.json version directly (no git interaction)
          node -e "
          const pkg = require('./package.json');
          pkg.version = process.argv[1];
          require('fs').writeFileSync('./package.json', JSON.stringify(pkg, null, 2) + '\n');
          " $VERSION_NUMBER
          
          echo "✅ Updated package.json version to $VERSION_NUMBER"
          
      - name: Update CHANGELOG.md with release information
        run: |
          VERSION="${{ needs.test-and-build.outputs.next-version }}"
          DATE=$(date +"%Y-%m-%d")
          
          echo "Updating CHANGELOG.md for release ${VERSION}"
          
          # Create CHANGELOG.md if it doesn't exist
          if [ ! -f CHANGELOG.md ]; then
            cat > CHANGELOG.md << EOF
          # Changelog
          
          All notable changes to this project will be documented in this file.
          
          The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
          and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
          
          EOF
          fi
          
          # Add new release entry at the top
          # Create temporary file with new entry
          cat > temp_changelog.md << EOF
          # Changelog
          
          All notable changes to this project will be documented in this file.
          
          The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
          and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
          
          ## [${VERSION}] - ${DATE}
          
          ### Features & Improvements
          - Automated release ${{ needs.test-and-build.outputs.next-version }}
          - Test coverage: ${{ needs.test-and-build.outputs.coverage }}%
          - Live demo: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}
          - Download: [${{ github.event.repository.name }}-${VERSION}.tar.gz](https://github.com/${{ github.repository }}/releases/download/${VERSION}/${{ github.event.repository.name }}-${VERSION}.tar.gz)
          
          EOF
          
          # Append existing changelog content (skip header)
          if [ -f CHANGELOG.md ]; then
            sed -n '8,$p' CHANGELOG.md >> temp_changelog.md
          fi
          
          # Replace CHANGELOG.md with updated version
          mv temp_changelog.md CHANGELOG.md
          
      - name: Commit and push version updates to release branch
        id: commit-changes
        run: |
          # Check if there are changes to commit
          if git diff --quiet package.json CHANGELOG.md; then
            echo "No version changes to commit"
            echo "has-changes=false" >> $GITHUB_OUTPUT
          else
            echo "Committing version updates for ${{ needs.test-and-build.outputs.next-version }}"
            
            # Add and commit the version updates
            git add package.json CHANGELOG.md
            git commit -m "chore: prepare release ${{ needs.test-and-build.outputs.next-version }}"
            
            # Push release branch to origin
            echo "Pushing release branch..."
            git push https://x-access-token:${{ secrets.RELEASE_PAT }}@github.com/${{ github.repository }}.git "${{ steps.create-branch.outputs.branch-name }}"
            echo "has-changes=true" >> $GITHUB_OUTPUT
          fi
          
      - name: Create and auto-merge pull request
        id: create-pr
        if: steps.commit-changes.outputs.has-changes == 'true'
        run: |
          VERSION="${{ needs.test-and-build.outputs.next-version }}"
          BRANCH_NAME="${{ steps.create-branch.outputs.branch-name }}"
          
          echo "Creating pull request for release $VERSION"
          
          # Create pull request using GitHub CLI with JSON output for reliable PR number extraction
          PR_NUMBER=$(gh pr create \
            --title "chore: prepare release $VERSION" \
            --body "🤖 **Automated Release Preparation**

          This PR contains automated version updates for release \`$VERSION\`.

          ## Changes
          - 📦 Updated \`package.json\` version to \`$(echo "$VERSION" | sed 's/^v//')\`
          - 📝 Updated \`CHANGELOG.md\` with release information
          
          ## Test Coverage
          📊 Current coverage: ${{ needs.test-and-build.outputs.coverage }}%
          
          ## After Merge
          🚀 GitHub release will be automatically created with:
          - Release notes and changelog
          - Downloadable archives (.tar.gz and .zip)
          - Live demo link
          
          ---
          
          This PR will be **automatically merged** to proceed with the release process." \
            --head "$BRANCH_NAME" \
            --base main \
            --json number \
            --jq .number)
          
          echo "✅ Pull request created: #$PR_NUMBER"
          
          # Enable auto-merge for the PR
          echo "🔄 Enabling auto-merge for PR #$PR_NUMBER"
          gh pr merge "$PR_NUMBER" --auto --squash --delete-branch
          
          echo "✅ Auto-merge enabled for PR #$PR_NUMBER"
          echo "🕐 Waiting for PR to be automatically merged..."
          
          # Store outputs
          if [ "$?" -eq 0 ]; then
            echo "pr-created=true" >> $GITHUB_OUTPUT
            echo "pr-number=$PR_NUMBER" >> $GITHUB_OUTPUT
          else
            echo "pr-created=false" >> $GITHUB_OUTPUT
          fi
          
          # Wait for auto-merge to complete (with timeout)
          TIMEOUT=300  # 5 minutes
          ELAPSED=0
          INTERVAL=10
          
          while [ $ELAPSED -lt $TIMEOUT ]; do
            echo "⏳ Checking PR status... (${ELAPSED}s elapsed)"
            
            PR_STATE=$(gh pr view "$PR_NUMBER" --json state --jq '.state')
            if [ "$PR_STATE" = "MERGED" ]; then
              echo "✅ PR #$PR_NUMBER has been automatically merged!"
              break
            elif [ "$PR_STATE" = "CLOSED" ]; then
              echo "❌ PR #$PR_NUMBER was closed without merging"
              exit 1
            fi
            
            sleep $INTERVAL
            ELAPSED=$((ELAPSED + INTERVAL))
          done
          
          if [ $ELAPSED -ge $TIMEOUT ]; then
            echo "⚠️ Timeout waiting for auto-merge to complete"
            echo "PR #$PR_NUMBER may still be pending. Check GitHub for status."
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.RELEASE_PAT }}

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test-and-build, update-version-files]
    if: needs.test-and-build.outputs.should-release == 'true' && github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Wait for version updates to be merged
        if: needs.update-version-files.outputs.pr-created == 'true'
        run: |
          echo "🕐 Waiting for version update PR to be merged before creating release..."
          echo "PR #${{ needs.update-version-files.outputs.pr-number }} should be auto-merged"
          
          # Additional safety wait to ensure merge is fully processed
          sleep 30
          
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for changelog generation
          ref: main  # Ensure we get the latest commit with version updates
          token: ${{ secrets.RELEASE_PAT }}  # Use PAT to get latest commits
          
      - name: Pull latest changes with version updates
        run: |
          echo "🔄 Ensuring we have the latest version updates..."
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git pull origin main
          
          # Verify we have the updated package.json version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          EXPECTED_VERSION=$(echo "${{ needs.test-and-build.outputs.next-version }}" | sed 's/^v//')
          
          echo "Current package.json version: $CURRENT_VERSION"
          echo "Expected version: $EXPECTED_VERSION"
          
          if [ "$CURRENT_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "⚠️ Warning: Version mismatch detected!"
            echo "This means the version update PR hasn't been merged yet."
            echo "Retrying in 30 seconds..."
            sleep 30
            git pull origin main
            
            # Check again
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            if [ "$CURRENT_VERSION" != "$EXPECTED_VERSION" ]; then
              echo "❌ ERROR: Version still doesn't match after retry!"
              echo "Expected: $EXPECTED_VERSION, Got: $CURRENT_VERSION"
              exit 1
            fi
          fi
          
          echo "✅ Version is correct - proceeding with release"
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files-${{ github.sha }}
          path: ./dist
        
      - name: Generate changelog
        id: changelog
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LATEST_TAG" ]; then
            echo "No previous tags found, generating changelog from first commit"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            echo "Generating changelog since tag: $LATEST_TAG"
            CHANGELOG=$(git log ${LATEST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          # Save changelog to file
          echo "## Changes" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "$CHANGELOG" >> CHANGELOG.md
          
          # Set output for GitHub Actions (handle multiline properly)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Create release archive
        run: |
          # Verify we have the correct package.json version before archiving
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          EXPECTED_VERSION=$(echo "${{ needs.test-and-build.outputs.next-version }}" | sed 's/^v//')
          
          echo "📦 Creating release archive..."
          echo "Current package.json version: $CURRENT_VERSION"
          echo "Expected version: $EXPECTED_VERSION"
          
          if [ "$CURRENT_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "❌ ERROR: Version mismatch in package.json!"
            echo "This means the release will contain the wrong version number."
            exit 1
          fi
          
          echo "✅ Package.json version is correct - proceeding with archive creation"
          
          # Create a clean distribution package
          mkdir -p release-package
          cp -r dist/* release-package/
          cp package.json release-package/
          cp README.md release-package/
          cp LICENSE* release-package/ 2>/dev/null || echo "No LICENSE file found"
          
          # Verify the copied package.json has the correct version
          ARCHIVE_VERSION=$(node -p "require('./release-package/package.json').version")
          echo "Archive package.json version: $ARCHIVE_VERSION"
          
          # Create archive using repository name (dynamic)
          tar -czf ${{ github.event.repository.name }}-${{ needs.test-and-build.outputs.next-version }}.tar.gz -C release-package .
          zip -r ${{ github.event.repository.name }}-${{ needs.test-and-build.outputs.next-version }}.zip release-package/
          
          echo "✅ Release archives created successfully with version $ARCHIVE_VERSION"
          
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.test-and-build.outputs.next-version }}
          name: Release ${{ needs.test-and-build.outputs.next-version }}
          body: |
            # Todo App Release ${{ needs.test-and-build.outputs.next-version }}
            
            ${{ steps.changelog.outputs.changelog }}
            
            ## 📊 Test Coverage
            Coverage: ${{ needs.test-and-build.outputs.coverage }}%
            
            ## 🚀 Live Demo
            Try the app: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}
            
            ## 📦 Installation
            
            1. Download the release archive
            2. Extract the files
            3. Serve the `dist` folder with any web server
            
            ## What's Changed
            See the changelog above for detailed changes in this release.
            
            **Full Changelog**: https://github.com/${{ github.repository }}/commits/${{ needs.test-and-build.outputs.next-version }}
          draft: false
          prerelease: false
          files: |
            ${{ github.event.repository.name }}-${{ needs.test-and-build.outputs.next-version }}.tar.gz
            ${{ github.event.repository.name }}-${{ needs.test-and-build.outputs.next-version }}.zip
          
      - name: Notify release completion
        run: |
          echo "🎉 Release ${{ needs.test-and-build.outputs.next-version }} created successfully!"
          echo "📦 Release URL: ${{ steps.create_release.outputs.url }}"
          echo "📊 Test Coverage: ${{ needs.test-and-build.outputs.coverage }}%"
          echo "🚀 Live Demo: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
          echo "⬇️ Download assets:"
          echo "   - ${{ github.event.repository.name }}-${{ needs.test-and-build.outputs.next-version }}.tar.gz"
          echo "   - ${{ github.event.repository.name }}-${{ needs.test-and-build.outputs.next-version }}.zip"

  update-coverage-badge:
    name: Update Coverage Badge
    runs-on: ubuntu-latest
    needs: [test-and-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && github.event.head_commit.author.email != 'actions@github.com'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_PAT }}
          persist-credentials: true
          
      - name: Configure Git
        run: |
          # Configure git with GitHub Actions identity for all subsequent git operations
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
      - name: Update coverage badge in README
        id: check-coverage-changes
        run: |
          # Update the coverage badge in README.md with new coverage percentage
          COVERAGE="${{ needs.test-and-build.outputs.coverage }}"
          
          # Determine badge color based on coverage percentage (using integer comparison)
          COVERAGE_INT=$(echo "$COVERAGE" | cut -d. -f1)
          if [ "$COVERAGE_INT" -ge 90 ]; then
            COLOR="brightgreen"
          elif [ "$COVERAGE_INT" -ge 80 ]; then
            COLOR="green"
          elif [ "$COVERAGE_INT" -ge 70 ]; then
            COLOR="yellow"
          elif [ "$COVERAGE_INT" -ge 60 ]; then
            COLOR="orange"
          else
            COLOR="red"
          fi
          
          # Update the README.md file
          sed -i "s/!\[Coverage\](https:\/\/img\.shields\.io\/badge\/coverage-[0-9.]*%25-[a-z]*)/![Coverage](https:\/\/img.shields.io\/badge\/coverage-${COVERAGE}%25-${COLOR})/g" README.md
          
          # Check if there were changes
          if git diff --quiet README.md; then
            echo "No coverage badge updates needed"
            echo "has-changes=false" >> $GITHUB_OUTPUT
          else
            echo "Updated coverage badge to ${COVERAGE}% (${COLOR})"
            echo "has-changes=true" >> $GITHUB_OUTPUT
          fi
          
      - name: Create coverage update pull request
        if: steps.check-coverage-changes.outputs.has-changes == 'true'
        run: |
          COVERAGE="${{ needs.test-and-build.outputs.coverage }}"
          BRANCH_NAME="automated-coverage-update/$(date +%Y%m%d-%H%M%S)"
          
          echo "Creating coverage update branch: $BRANCH_NAME"
          
          # Create and switch to new branch
          git checkout -b "$BRANCH_NAME"
          
          # Add and commit the coverage badge update
          git add README.md
          git commit -m "chore: update coverage badge to ${COVERAGE}%"
          
          # Push coverage update branch to origin
          echo "Pushing coverage update branch..."
          git push https://x-access-token:${{ secrets.RELEASE_PAT }}@github.com/${{ github.repository }}.git "$BRANCH_NAME"
          
          # Create pull request using GitHub CLI
          PR_URL=$(gh pr create \
            --title "chore: update coverage badge to ${COVERAGE}%" \
            --body "🤖 **Automated Coverage Badge Update**

          This PR updates the coverage badge in README.md.

          ## Changes
          - 📊 Updated coverage badge to \`${COVERAGE}%\`
          
          ---
          
          This PR will be **automatically merged** to keep the coverage badge up to date." \
            --head "$BRANCH_NAME" \
            --base main)
          
          echo "✅ Coverage update PR created: $PR_URL"
          
          # Extract PR number and enable auto-merge
          PR_NUMBER=$(echo "$PR_URL" | grep -o '[0-9]*$')
          gh pr merge "$PR_NUMBER" --auto --squash --delete-branch
          
          echo "✅ Auto-merge enabled for coverage update PR #$PR_NUMBER"
        env:
          GH_TOKEN: ${{ secrets.RELEASE_PAT }}


