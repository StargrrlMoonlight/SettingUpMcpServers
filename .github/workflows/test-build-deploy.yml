name: Test, Build, Deploy & Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  pages: write
  id-token: write
  pull-requests: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
#
# IMPORTANT: This workflow requires a Personal Access Token (PAT) named 'RELEASE_PAT' 
# to be configured as a repository secret for:
# - Creating automated pull requests for version updates
# - Auto-merging release and coverage update PRs
# - Working with branch protection by using PR-based automation
#
# To create the PAT:
# 1. Go to GitHub Settings → Developer settings → Personal access tokens
# 2. Generate new token with 'repo' and 'workflow' scopes
# 3. Add as repository secret named 'RELEASE_PAT'
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Basic test and build job that runs for all events to provide status checks
  test-and-build:
    name: Test & Build
    runs-on: ubuntu-latest
    
    outputs:
      coverage: ${{ steps.coverage.outputs.coverage || '0' }}
      build-success: ${{ steps.build.outputs.success || 'false' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        persist-credentials: true
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests with coverage
      run: npm run test:ci
      
    - name: Extract coverage percentage
      id: coverage
      run: |
        # Extract coverage percentage from the coverage summary
        COVERAGE=$(cat coverage/coverage-summary.json | jq -r '.total.lines.pct')
        echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
        echo "📊 Test coverage: $COVERAGE%"
        
    - name: Build application
      id: build
      run: |
        npm run build
        echo "success=true" >> $GITHUB_OUTPUT

  # Lint job for code quality checks
  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint

  check-release-eligibility:
    name: Check Release Eligibility
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    outputs:
      should-release: ${{ steps.release-check.outputs.should-release }}
      next-version: ${{ steps.release-check.outputs.next-version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        persist-credentials: true
      
    - name: Check if release should be created
      if: github.ref == 'refs/heads/main' && github.event_name == 'push' && github.event.head_commit.author.email != 'actions@github.com'
      id: release-check
      run: |
        # Get the latest tag to determine next version
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Latest tag: $LATEST_TAG"
        
        # Get current package.json version
        CURRENT_PKG_VERSION=$(node -p "require('./package.json').version")
        echo "Current package.json version: $CURRENT_PKG_VERSION"
        
        # Check if there are any commits since the last tag
        if [ "$LATEST_TAG" = "v0.0.0" ]; then
          COMMITS_SINCE_TAG=1
        else
          COMMITS_SINCE_TAG=$(git rev-list ${LATEST_TAG}..HEAD --count)
        fi
        
        echo "Commits since last tag: $COMMITS_SINCE_TAG"
        
        if [ "$COMMITS_SINCE_TAG" -gt 0 ]; then
          echo "should-release=true" >> $GITHUB_OUTPUT
          
          # Extract version numbers for comparison
          if [ "$LATEST_TAG" = "v0.0.0" ]; then
            # First release
            NEW_VERSION="v1.0.0"
            echo "🎉 First release detected"
          else
            # Compare git tag version vs package.json version and use the higher one as baseline
            TAG_VERSION=$(echo $LATEST_TAG | sed 's/^v//')
            PKG_VERSION="$CURRENT_PKG_VERSION"
            
            echo "🔍 Comparing versions:"
            echo "  Git tag version: $TAG_VERSION"
            echo "  Package.json version: $PKG_VERSION"
            
            # Function to compare versions (returns 0 if equal, 1 if first > second, 2 if first < second)
            compare_versions() {
              if [ "$1" = "$2" ]; then
                return 0
              fi
              
              local v1=$(echo "$1" | tr '.' ' ')
              local v2=$(echo "$2" | tr '.' ' ')
              
              local major1=$(echo $v1 | awk '{print $1}')
              local minor1=$(echo $v1 | awk '{print $2}')
              local patch1=$(echo $v1 | awk '{print $3}')
              
              local major2=$(echo $v2 | awk '{print $1}')
              local minor2=$(echo $v2 | awk '{print $2}')
              local patch2=$(echo $v2 | awk '{print $3}')
              
              if [ "$major1" -gt "$major2" ]; then return 1; fi
              if [ "$major1" -lt "$major2" ]; then return 2; fi
              
              if [ "$minor1" -gt "$minor2" ]; then return 1; fi
              if [ "$minor1" -lt "$minor2" ]; then return 2; fi
              
              if [ "$patch1" -gt "$patch2" ]; then return 1; fi
              if [ "$patch1" -lt "$patch2" ]; then return 2; fi
              
              return 0
            }
            
            # Determine which version to use as baseline
            # Use set +e to prevent the script from exiting on non-zero return codes
            set +e
            compare_versions "$PKG_VERSION" "$TAG_VERSION"
            VERSION_COMPARISON=$?
            set -e
            
            if [ $VERSION_COMPARISON -eq 1 ]; then
              # Package.json version is higher - use it as baseline
              echo "📈 Package.json version ($PKG_VERSION) is ahead of git tag ($TAG_VERSION)"
              echo "   Using package.json version as baseline"
              BASELINE_VERSION="$PKG_VERSION"
            elif [ $VERSION_COMPARISON -eq 2 ]; then
              # Git tag version is higher - use it as baseline  
              echo "📈 Git tag version ($TAG_VERSION) is ahead of package.json ($PKG_VERSION)"
              echo "   Using git tag version as baseline"
              BASELINE_VERSION="$TAG_VERSION"
            else
              # Versions are equal - use either one
              echo "⚖️  Versions are equal ($TAG_VERSION = $PKG_VERSION)"
              echo "   Using git tag version as baseline"
              BASELINE_VERSION="$TAG_VERSION"
            fi
            
            echo "🎯 Baseline version for calculation: $BASELINE_VERSION"
            
            # Parse baseline version for increment calculation
            IFS='.' read -r MAJOR MINOR PATCH <<< "$BASELINE_VERSION"
            
            # Get commit messages for analysis (with debug output)
            COMMIT_MESSAGES=$(git log ${LATEST_TAG}..HEAD --oneline)
            echo "🔍 Analyzing commits since $LATEST_TAG:"
            echo "$COMMIT_MESSAGES"
            
            # Version bumping with proper precedence - breaking changes always win
            if echo "$COMMIT_MESSAGES" | grep -qiE "(BREAKING CHANGE|breaking change)"; then
              # Major version bump for breaking changes (highest precedence)
              NEW_VERSION="v$((MAJOR + 1)).0.0"
              echo "🚨 Major version bump detected (breaking change)"
            elif echo "$COMMIT_MESSAGES" | grep -qiE "(fix|patch)"; then
              # Patch version bump for fixes (only if no breaking changes)
              NEW_VERSION="v${MAJOR}.${MINOR}.$((PATCH + 1))"
              echo "🔧 Patch version bump detected (fix or patch)"
            else
              # Default to minor version for all other commits (lowest precedence)
              NEW_VERSION="v${MAJOR}.$((MINOR + 1)).0"
              echo "📦 Minor version bump (default for all other commits)"
            fi
          fi
          
          echo "next-version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "🎯 Next release version: $NEW_VERSION"
        else
          echo "should-release=false" >> $GITHUB_OUTPUT
          echo "No new commits since last tag, skipping release"
        fi

  test-and-build-for-version:
    name: Test & Build for Version Updates
    runs-on: ubuntu-latest
    needs: [check-release-eligibility]
    if: needs.check-release-eligibility.outputs.should-release == 'true' && github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    outputs:
      coverage: ${{ steps.coverage.outputs.coverage || '0' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        persist-credentials: true
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests with coverage
      run: npm run test:ci
      
    - name: Extract coverage percentage
      id: coverage
      run: |
        # Extract coverage percentage from the coverage summary
        COVERAGE=$(cat coverage/coverage-summary.json | jq -r '.total.lines.pct')
        echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
        echo "📊 Test coverage: $COVERAGE%"

  update-version-files:
    name: Update Version Files
    runs-on: ubuntu-latest
    needs: [check-release-eligibility, test-and-build-for-version]
    if: needs.check-release-eligibility.outputs.should-release == 'true' && github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    outputs:
      pr-created: ${{ steps.create-pr.outputs.pr-created || 'false' }}
      pr-number: ${{ steps.create-pr.outputs.pr-number || '' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_PAT }}
          persist-credentials: true
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Configure Git
        run: |
          # Configure git with GitHub Actions identity for all subsequent git operations
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
        
      - name: Create release branch
        id: create-branch
        run: |
          VERSION="${{ needs.check-release-eligibility.outputs.next-version }}"
          BRANCH_NAME="automated-release/${VERSION}"
          
          echo "Creating release branch: $BRANCH_NAME"
          
          # Create and switch to new branch
          git checkout -b "$BRANCH_NAME"
          echo "branch-name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
      - name: Update package.json version
        run: |
          VERSION="${{ needs.check-release-eligibility.outputs.next-version }}"
          # Remove 'v' prefix for package.json
          CLEAN_VERSION=$(echo $VERSION | sed 's/^v//')
          
          # Get current package.json version to compare
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          
          echo "Current package.json version: $CURRENT_VERSION"
          echo "Target version: $CLEAN_VERSION"
          
          # Only update if versions are different
          if [ "$CURRENT_VERSION" != "$CLEAN_VERSION" ]; then
            echo "Updating package.json version to: $CLEAN_VERSION"
            npm version $CLEAN_VERSION --no-git-tag-version
          else
            echo "ℹ️  Package.json already at target version $CLEAN_VERSION, skipping npm version update"
          fi
          
      - name: Update coverage badge in README.md
        run: |
          COVERAGE="${{ needs.test-and-build-for-version.outputs.coverage }}"
          
          echo "📊 Updating coverage badge to: $COVERAGE%"
          
          # Determine badge color based on coverage percentage
          COVERAGE_INT=$(echo "$COVERAGE" | cut -d. -f1)
          if [ "$COVERAGE_INT" -ge 90 ]; then
            COLOR="brightgreen"
          elif [ "$COVERAGE_INT" -ge 80 ]; then
            COLOR="green"
          elif [ "$COVERAGE_INT" -ge 70 ]; then
            COLOR="yellowgreen"
          elif [ "$COVERAGE_INT" -ge 60 ]; then
            COLOR="yellow"
          elif [ "$COVERAGE_INT" -ge 50 ]; then
            COLOR="orange"
          else
            COLOR="red"
          fi
          
          # Create new coverage badge URL
          NEW_BADGE="![Coverage](https://img.shields.io/badge/coverage-${COVERAGE}%25-${COLOR})"
          
          # Update README.md - replace existing coverage badge or add new one
          if grep -q "!\[Coverage\]" README.md; then
            # Replace existing coverage badge
            sed -i "s|!\[Coverage\][^)]*|$NEW_BADGE|g" README.md
            echo "✅ Updated existing coverage badge"
          else
            # Add coverage badge after title (assuming # Title is first line)
            sed -i "1a\\$NEW_BADGE" README.md
            echo "✅ Added new coverage badge"
          fi
          
          echo "Coverage badge updated to: $NEW_BADGE"
          
      - name: Generate CHANGELOG.md
        run: |
          VERSION="${{ needs.check-release-eligibility.outputs.next-version }}"
          COVERAGE="${{ needs.test-and-build-for-version.outputs.coverage }}"
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          
          echo "# Changelog" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          if [ "$LATEST_TAG" = "v0.0.0" ]; then
            echo "## [$VERSION] - $(date '+%Y-%m-%d')" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "### Added" >> CHANGELOG.md
            echo "- Initial release of React Todo-List Application" >> CHANGELOG.md
            echo "- Modern React components with hooks" >> CHANGELOG.md
            echo "- Responsive design with elegant styling" >> CHANGELOG.md
            echo "- Automated CI/CD pipeline with GitHub Actions" >> CHANGELOG.md
            echo "- Test coverage: ${COVERAGE}%" >> CHANGELOG.md
          else
            echo "## [$VERSION] - $(date '+%Y-%m-%d')" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            
            # Get commits since last tag and categorize them
            COMMITS=$(git log ${LATEST_TAG}..HEAD --oneline)
            
            # Features
            FEATURES=$(echo "$COMMITS" | grep -i "feat" || true)
            if [ -n "$FEATURES" ]; then
              echo "### Added" >> CHANGELOG.md
              echo "$FEATURES" | sed 's/^[a-f0-9]* /- /' >> CHANGELOG.md
              echo "" >> CHANGELOG.md
            fi
            
            # Fixes
            FIXES=$(echo "$COMMITS" | grep -i "fix" || true)
            if [ -n "$FIXES" ]; then
              echo "### Fixed" >> CHANGELOG.md
              echo "$FIXES" | sed 's/^[a-f0-9]* /- /' >> CHANGELOG.md
              echo "" >> CHANGELOG.md
            fi
            
            # Other changes
            OTHER=$(echo "$COMMITS" | grep -v -i "feat\|fix" || true)
            if [ -n "$OTHER" ]; then
              echo "### Changed" >> CHANGELOG.md
              echo "$OTHER" | sed 's/^[a-f0-9]* /- /' >> CHANGELOG.md
              echo "" >> CHANGELOG.md
            fi
            
            echo "### Quality Metrics" >> CHANGELOG.md
            echo "- Test coverage: ${COVERAGE}%" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi
          
      - name: Commit version updates
        run: |
          VERSION="${{ needs.check-release-eligibility.outputs.next-version }}"
          COVERAGE="${{ needs.test-and-build-for-version.outputs.coverage }}"
          BRANCH_NAME="${{ steps.create-branch.outputs.branch-name }}"
          
          # Add the updated files
          git add package.json package-lock.json CHANGELOG.md README.md
          
          # Commit the changes
          git commit -m "chore: release $VERSION

          - Update package.json version
          - Generate CHANGELOG.md  
          - Update coverage badge to ${COVERAGE}%
          
          This is an automated release preparation commit."
          
          echo "✅ Version files and coverage badge updated and committed on branch: $BRANCH_NAME"
      
      - name: Create and auto-merge PR
        id: create-pr
        run: |
          VERSION="${{ needs.check-release-eligibility.outputs.next-version }}"
          COVERAGE="${{ needs.test-and-build-for-version.outputs.coverage }}"
          BRANCH_NAME="${{ steps.create-branch.outputs.branch-name }}"
          
          # Push release branch to origin
          echo "Pushing release branch to origin..."
          git push https://x-access-token:${{ secrets.RELEASE_PAT }}@github.com/${{ github.repository }}.git "$BRANCH_NAME"
          
          echo "Creating pull request for release $VERSION"
          
          # Create pull request using GitHub CLI and extract PR number from URL
          PR_URL=$(gh pr create \
            --title "chore: release $VERSION" \
            --body "🚀 **Automated Release Preparation**

          This PR contains automated updates for release \`$VERSION\`.

          ## Changes
          - 📦 Updated \`package.json\` version to \`$(echo "$VERSION" | sed 's/^v//')\`
          - 📝 Updated \`CHANGELOG.md\` with release information
          - 📊 Updated coverage badge to \`${COVERAGE}%\`
          
          ## After Merge
          🚀 GitHub release will be automatically created with:
          - Release notes and changelog
          - Downloadable archives (.tar.gz and .zip)
          - Live demo link
          - Updated coverage information
          
          ---
          
          This PR will be **automatically merged** to proceed with the release process." \
            --head "$BRANCH_NAME" \
            --base main)
          
          # Extract PR number from the URL
          PR_NUMBER=$(echo "$PR_URL" | grep -o '[0-9]*$')
          
          echo "✅ Pull request created: #$PR_NUMBER"
          echo "🔗 PR URL: $PR_URL"
          
          # Enable auto-merge for the PR
          echo "🔄 Enabling auto-merge for PR #$PR_NUMBER"
          if gh pr merge "$PR_NUMBER" --auto --squash --delete-branch; then
            echo "✅ Auto-merge enabled successfully for PR #$PR_NUMBER"
          else
            echo "⚠️ Warning: Failed to enable auto-merge for PR #$PR_NUMBER"
          fi
          
          echo "🕐 Waiting for PR to be automatically merged..."
          
          # Store outputs
          echo "pr-created=true" >> $GITHUB_OUTPUT
          echo "pr-number=$PR_NUMBER" >> $GITHUB_OUTPUT
          
          # Wait for auto-merge to complete (with extended timeout)
          TIMEOUT=600  # 10 minutes
          ELAPSED=0
          INTERVAL=10
          
          while [ $ELAPSED -lt $TIMEOUT ]; do
            echo "⏳ Checking PR status... (${ELAPSED}s elapsed)"
            
            # Get PR state
            PR_STATE=$(gh pr view "$PR_NUMBER" --json state --jq '.state' 2>/dev/null || echo "unknown")
            echo "📊 PR State: $PR_STATE"
            
            if [ "$PR_STATE" = "MERGED" ]; then
              echo "✅ PR #$PR_NUMBER has been automatically merged!"
              echo "🎉 Total time waited: ${ELAPSED}s"
              break
            elif [ "$PR_STATE" = "CLOSED" ]; then
              echo "❌ PR #$PR_NUMBER was closed without merging"
              exit 1
            fi
            
            sleep $INTERVAL
            ELAPSED=$((ELAPSED + INTERVAL))
          done
          
          if [ $ELAPSED -ge $TIMEOUT ]; then
            echo "⏰ Timeout reached after ${TIMEOUT}s"
            echo "⚠️ Auto-merge did not complete within the timeout period"
            echo "🚀 The release process will continue, but please verify the PR status manually"
            exit 0
          fi
          
        env:
          GH_TOKEN: ${{ secrets.RELEASE_PAT }}

  test-and-build-final:
    name: Final Test & Build
    runs-on: ubuntu-latest
    needs: [check-release-eligibility, update-version-files]
    # Run for all commits, but wait for version updates if it's a release
    if: |
      always() && 
      needs.check-release-eligibility.result == 'success' &&
      (
        (needs.check-release-eligibility.outputs.should-release == 'false') ||
        (needs.check-release-eligibility.outputs.should-release == 'true' && needs.update-version-files.result == 'success')
      )
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    outputs:
      coverage: ${{ steps.coverage.outputs.coverage || '0' }}
      build-success: ${{ steps.build.outputs.success || 'false' }}
    
    steps:
    - name: Wait for version updates to be merged
      if: needs.check-release-eligibility.outputs.should-release == 'true' && needs.update-version-files.outputs.pr-created == 'true'
      run: |
        echo "🕐 Waiting for version update PR to be merged before final testing/building..."
        echo "PR #${{ needs.update-version-files.outputs.pr-number }} should be auto-merged"
        
        # Additional safety wait to ensure merge is fully processed
        sleep 30
    
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: main  # Always get the latest main branch (with version updates if applicable)
        token: ${{ secrets.RELEASE_PAT }}
        persist-credentials: true
        
    - name: Pull latest changes
      run: |
        echo "🔄 Ensuring we have the latest code (including any version updates)..."
        git config --local user.email "actions@github.com"
        git config --local user.name "GitHub Actions"
        git pull origin main
        
        # If this is a release, verify we have the correct version
        if [ "${{ needs.check-release-eligibility.outputs.should-release }}" = "true" ]; then
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          EXPECTED_VERSION=$(echo "${{ needs.check-release-eligibility.outputs.next-version }}" | sed 's/^v//')
          
          echo "Current package.json version: $CURRENT_VERSION"
          echo "Expected version: $EXPECTED_VERSION"
          
          if [ "$CURRENT_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "⚠️ Warning: Version mismatch detected!"
            echo "Retrying in 30 seconds..."
            sleep 30
            git pull origin main
            
            # Check again
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            if [ "$CURRENT_VERSION" != "$EXPECTED_VERSION" ]; then
              echo "❌ ERROR: Version still doesn't match after retry!"
              exit 1
            fi
          fi
          
          echo "✅ Version is correct - proceeding with final testing/building"
        fi
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Run tests with coverage
      run: npm run test:ci
      
    - name: Extract coverage percentage
      if: matrix.node-version == '20.x'
      id: coverage
      run: |
        # Extract coverage percentage from the coverage summary
        COVERAGE=$(cat coverage/coverage-summary.json | jq -r '.total.lines.pct')
        echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
        echo "📊 Final test coverage: $COVERAGE%"
      
    - name: Build application
      id: build
      run: |
        echo "🔨 Building application..."
        npm run build
        echo "✅ Build completed successfully!"
        echo "success=true" >> $GITHUB_OUTPUT
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: matrix.node-version == '20.x' && steps.build.outputs.success == 'true'
      with:
        name: build-files-${{ github.sha }}
        path: dist/
        retention-days: 30

  accessibility:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    needs: [test-and-build-final]
    if: always() && needs.test-and-build-final.outputs.build-success == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
        
    - name: Setup Chrome for testing
      run: |
        # Install Chrome and ChromeDriver directly
        wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        
        # Get Chrome version and install matching ChromeDriver
        CHROME_VERSION=$(google-chrome --version | awk '{print $3}' | cut -d. -f1)
        echo "Detected Chrome version: $CHROME_VERSION"
        
        # Install ChromeDriver that matches Chrome version
        npm install -g chromedriver@$CHROME_VERSION
        
    - name: Run accessibility tests
      run: |
        # Set environment variables for axe testing
        export CHROME_BIN=$(which google-chrome)
        export CHROMEDRIVER_BIN=$(which chromedriver)
        echo "Using Chrome: $CHROME_BIN"
        echo "Using ChromeDriver: $CHROMEDRIVER_BIN"
        
        npm run build
        
        # Run axe with explicit ChromeDriver path
        npx start-server-and-test preview http://localhost:4173 "npx @axe-core/cli http://localhost:4173 --chromedriver-path $CHROMEDRIVER_BIN"

  deploy-pages:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: [test-and-build-final, accessibility]
    # Run if test-and-build-final succeeds AND either accessibility succeeds or is skipped
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && github.event.head_commit.author.email != 'actions@github.com' && needs.test-and-build-final.outputs.build-success == 'true' && (needs.accessibility.result == 'success' || needs.accessibility.result == 'skipped')
    environment:
      name: production
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files-${{ github.sha }}
          path: ./dist
          
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: Production Health Check
        run: |
          echo "🚀 Production deployment complete!"
          echo "🌍 Production URL: ${{ steps.deployment.outputs.page_url }}"
          
          # Basic health check
          echo "Performing production health check..."
          sleep 15
          
          if curl -f -s "${{ steps.deployment.outputs.page_url }}" > /dev/null; then
            echo "✅ Production health check passed!"
          else
            echo "⚠️ Production site may not be ready yet (this is normal for GitHub Pages)"
          fi

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [check-release-eligibility, update-version-files, test-and-build-final]
    if: needs.check-release-eligibility.outputs.should-release == 'true' && github.ref == 'refs/heads/main' && github.event_name == 'push' && needs.test-and-build-final.outputs.build-success == 'true'
    
    steps:
      - name: Wait for version updates to be merged
        if: needs.update-version-files.outputs.pr-created == 'true'
        run: |
          echo "🕐 Waiting for version update PR to be merged before creating release..."
          echo "PR #${{ needs.update-version-files.outputs.pr-number }} should be auto-merged"
          
          # Additional safety wait to ensure merge is fully processed
          sleep 30
          
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for changelog generation
          ref: main  # Ensure we get the latest commit with version updates
          token: ${{ secrets.RELEASE_PAT }}  # Use PAT to get latest commits
          
      - name: Pull latest changes with version updates
        run: |
          echo "🔄 Ensuring we have the latest version updates..."
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git pull origin main
          
          # Verify we have the updated package.json version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          EXPECTED_VERSION=$(echo "${{ needs.check-release-eligibility.outputs.next-version }}" | sed 's/^v//')
        
          echo "Current package.json version: $CURRENT_VERSION"
          echo "Expected version: $EXPECTED_VERSION"
          
          if [ "$CURRENT_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "⚠️ Warning: Version mismatch detected! Retrying..."
            sleep 30
            git pull origin main
            
            # Check again
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            if [ "$CURRENT_VERSION" != "$EXPECTED_VERSION" ]; then
              echo "❌ ERROR: Version still doesn't match after retry!"
              exit 1
            fi
          fi
          
          echo "✅ Verified package.json has correct version: $CURRENT_VERSION"
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
        
      - name: Install dependencies
        run: npm ci
        
      - name: Build application with updated version
        run: |
          echo "🔨 Building application for release..."
          npm run build
          echo "✅ Production build completed successfully!"
        
      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ needs.check-release-eligibility.outputs.next-version }}"
          
          echo "📝 Generating release notes for version $VERSION"
          
          # Read the changelog that was generated in the version update
          if [ -f "CHANGELOG.md" ]; then
            # Extract just the latest version's changes from CHANGELOG.md
            CHANGELOG_CONTENT=$(awk '/^## \[/ {if (first++) exit} first' CHANGELOG.md | tail -n +2)
            echo "Found CHANGELOG.md, extracting content for $VERSION"
          else
            echo "⚠️ CHANGELOG.md not found, generating basic changelog"
            CHANGELOG_CONTENT="### Changes in this release
          - See commit history for detailed changes"
          fi
          
          # Save to output
          echo 'changelog<<EOF' >> $GITHUB_OUTPUT
          echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
          
      - name: Create and push git tag
        run: |
          VERSION="${{ needs.check-release-eligibility.outputs.next-version }}"
          
          echo "🏷️ Creating git tag: $VERSION"
          
          # Configure git
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          
          # Create the tag
          git tag -a "$VERSION" -m "Release $VERSION

          - Automated release created by GitHub Actions
          - Test Coverage: ${{ needs.test-and-build-final.outputs.coverage }}%
          - Build Status: ✅ Success"
          
          # Push the tag to origin
          git push origin "$VERSION"
          
          echo "✅ Git tag $VERSION created and pushed successfully"
          
      - name: Create release archive
        run: |
          echo "📦 Creating release archives..."
          
          # Create archives of the built application
          cd dist
          tar -czf ../todo-app-${{ needs.check-release-eligibility.outputs.next-version }}.tar.gz .
          zip -r ../todo-app-${{ needs.check-release-eligibility.outputs.next-version }}.zip .
          cd ..
          
          echo "✅ Release archives created:"
          ls -la *.tar.gz *.zip
          
      - name: Create GitHub Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_PAT }}
        with:
          tag_name: ${{ needs.check-release-eligibility.outputs.next-version }}
          release_name: Release ${{ needs.check-release-eligibility.outputs.next-version }}
          body: |
            # 🚀 Release ${{ needs.check-release-eligibility.outputs.next-version }}
            
            ${{ steps.changelog.outputs.changelog }}
            
            ## 📊 Quality Metrics
            - Test Coverage: ${{ needs.test-and-build-final.outputs.coverage }}%
            - Node.js Versions Tested: 18.x, 20.x
            - Build Status: ✅ Success
            
            ## 🌐 Live Demo
            [View Live Demo](https://stargrrlmoonlight.github.io/SettingUpMcpServers/)
            
            ## 📥 Downloads
            - **Source Code**: Download the source code archives below
            - **Built Application**: Use the `.tar.gz` or `.zip` files for direct deployment
            
            ---
            
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo 'initial')...${{ needs.check-release-eligibility.outputs.next-version }}
          draft: false
          prerelease: false
          
      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_PAT }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./todo-app-${{ needs.check-release-eligibility.outputs.next-version }}.tar.gz
          asset_name: todo-app-${{ needs.check-release-eligibility.outputs.next-version }}.tar.gz
          asset_content_type: application/gzip
          
      - name: Upload ZIP Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_PAT }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./todo-app-${{ needs.check-release-eligibility.outputs.next-version }}.zip
          asset_name: todo-app-${{ needs.check-release-eligibility.outputs.next-version }}.zip
          asset_content_type: application/zip
          
      - name: Release Summary
        run: |
          echo "🎉 Release ${{ needs.check-release-eligibility.outputs.next-version }} created successfully!"
          echo "🔗 Release URL: ${{ steps.create_release.outputs.html_url }}"
          echo "📊 Test Coverage: ${{ needs.test-and-build-final.outputs.coverage }}%"
          echo "🌐 Live Demo: https://stargrrlmoonlight.github.io/SettingUpMcpServers/"
          echo ""
          echo "📦 Release includes:"
          echo "  - Source code archives"
          echo "  - Built application (.tar.gz and .zip)"
          echo "  - Comprehensive changelog"
          echo "  - Quality metrics and test coverage"