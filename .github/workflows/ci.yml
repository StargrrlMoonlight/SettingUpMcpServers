name: Continuous Integration

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write

jobs:
  test:
    name: Test & Quality Gates
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Run tests with coverage
      run: npm run test:ci
      
    - name: Update README with coverage badge
      if: matrix.node-version == '20.x' && github.ref == 'refs/heads/main'
      run: |
        # Install jq if not already installed
        sudo apt-get update && sudo apt-get install -y jq bc
        
        # Verify the coverage summary file exists
        if [ ! -f "coverage/coverage-summary.json" ]; then
          echo "Error: coverage-summary.json not found. Ensure test:ci is generating the file correctly."
          exit 1
        fi
        
        # Extract coverage percentage from the coverage summary
        COVERAGE=$(cat coverage/coverage-summary.json | jq -r '.total.lines.pct')
        echo "Coverage: $COVERAGE%"
        
        # List coverage directory contents for debugging
        echo "Coverage directory contents:"
        ls -la coverage/
        
        # Determine badge color based on coverage
        if (( $(echo "$COVERAGE >= 90" | bc -l) )); then
          COLOR=brightgreen
        elif (( $(echo "$COVERAGE >= 80" | bc -l) )); then
          COLOR=green
        elif (( $(echo "$COVERAGE >= 70" | bc -l) )); then
          COLOR=yellowgreen
        elif (( $(echo "$COVERAGE >= 60" | bc -l) )); then
          COLOR=yellow
        else
          COLOR=red
        fi
        
        # Create badge URL
        BADGE_URL="https://img.shields.io/badge/coverage-$COVERAGE%25-$COLOR"
        
        # Update README.md with the new badge
        sed -i -E "s|!\[Coverage\]\(https://img.shields.io/badge/coverage-[0-9]+%25-[a-zA-Z]+\)|![Coverage]($BADGE_URL)|g" README.md
        
    - name: Commit updated README with coverage badge
      if: matrix.node-version == '20.x' && github.ref == 'refs/heads/main'
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git add README.md
        git diff --staged --quiet || git commit -m "docs: update coverage badge [skip ci]"
        git push || echo "No changes to push"
      
    - name: Build application
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: matrix.node-version == '20.x'
      with:
        name: build-files-${{ github.sha }}
        path: dist/
        retention-days: 30

  accessibility:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    needs: test
    continue-on-error: true  # Make this job optional to prevent blocking the workflow
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
        
    - name: Setup Chrome for testing
      run: |
        # Install Chrome and ChromeDriver directly
        wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        
        # Get Chrome version and install matching ChromeDriver
        CHROME_VERSION=$(google-chrome --version | awk '{print $3}' | cut -d. -f1)
        echo "Detected Chrome version: $CHROME_VERSION"
        
        # Install ChromeDriver that matches Chrome version
        npm install -g chromedriver@$CHROME_VERSION
        
    - name: Run accessibility tests
      run: |
        # Set environment variables for axe testing
        export CHROME_BIN=$(which google-chrome)
        export CHROMEDRIVER_BIN=$(which chromedriver)
        echo "Using Chrome: $CHROME_BIN"
        echo "Using ChromeDriver: $CHROMEDRIVER_BIN"
        
        npm run build
        
        # Run axe with explicit ChromeDriver path
        npx start-server-and-test preview http://localhost:4173 "npx @axe-core/cli http://localhost:4173 --chromedriver-path $CHROMEDRIVER_BIN"
